name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# ────────── глобальные переменные ───────────────────────────────────────────────
env:
  REGISTRY: ghcr.io
  OWNER: ${{ github.repository_owner }}                # автоматически → lower-case позже
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

# ────────── 1. BUILD ────────────────────────────────────────────────────────────
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.CR_PAT }}

      - name: Build all services (Compose)
        run: docker compose build --parallel

      - name: Tag & push images to GHCR
        run: |
          # ↓ приведём owner и repo к lower-case (GHCR требует)
          OWNER_LOWER=$(echo "${{ env.OWNER }}" | tr '[:upper:]' '[:lower:]')
          REPO_LOWER=$(echo "${{ github.event.repository.name }}" | tr '[:upper:]' '[:lower:]')
          PROJECT_NAME=$(basename "$PWD")          # ld-platform → такое имя использует compose
          
          for svc in auth user diagnostics; do
            LOCAL_TAG="${PROJECT_NAME}-${svc}:latest"                     # ld-platform-auth:latest
            REMOTE_TAG="${{ env.REGISTRY }}/${OWNER_LOWER}/${REPO_LOWER}-${svc}:latest"
            echo "Retag  $LOCAL_TAG  →  $REMOTE_TAG"
            docker tag "$LOCAL_TAG" "$REMOTE_TAG"
            echo "Push   $REMOTE_TAG"
            docker push "$REMOTE_TAG"
          done

# ────────── 2. TEST ─────────────────────────────────────────────────────────────
  test:
    needs: build
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:24-dind
        options: --privileged
        ports: [ 2375:2375 ]
    env:
      DOCKER_HOST: tcp://localhost:2375
      DOCKER_TLS_CERTDIR: ""
    steps:
      - uses: actions/checkout@v3

      - name: Wait for Docker dind ready
        run: for i in {1..15}; do docker info && break || sleep 1; done

      - name: Build services for test (cached)
        run: docker compose build auth user diagnostics

      - name: Start services
        run: docker compose up -d auth user diagnostics

      - name: Health-checks
        run: |
          curl --retry 5 --retry-connrefused http://localhost:4000/health
          curl --retry 5 --retry-connrefused http://localhost:4001/health
          curl --retry 5 --retry-connrefused http://localhost:4002/health

      - name: Teardown
        run: docker compose down

# ────────── 3. NOTIFY (опционально Slack) ───────────────────────────────────────
  notify:
    if: always()
    needs: [ build, test ]
    runs-on: ubuntu-latest
    steps:
      - name: Send Slack message (when webhook set)
        if: ${{ env.SLACK_WEBHOOK_URL != '' }}
        env:
          WEBHOOK: ${{ env.SLACK_WEBHOOK_URL }}
        run: |
          STATUS="✅ SUCCESS"
          if [ "${{ needs.test.result }}" != "success" ]; then STATUS="❌ FAILURE"; fi
          MSG="CI/CD pipeline *${STATUS}* for *${{ github.repository }}* (<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|details>)"
          curl -X POST -H 'Content-Type: application/json' --data "{\"text\":\"$MSG\"}" "$WEBHOOK"

# ────────── 4. DEPLOY (заглушка) ────────────────────────────────────────────────
  deploy:
    if: github.event_name == 'push'
    needs: [ build, test ]
    runs-on: ubuntu-latest
    steps:
      - name: Deploy placeholder
        run: echo "Deploy step — будет настроен позже"
