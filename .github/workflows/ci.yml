name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  OWNER: ${{ github.repository_owner }}
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

# ────────── BUILD ───────────────────────────────────────────────────────────────
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build all services
        run: docker compose build --parallel

      - name: Tag & push images
        run: |
          OWNER_LOWER=$(echo "${{ env.OWNER }}" | tr '[:upper:]' '[:lower:]')
          REPO_LOWER=$(echo "${{ github.event.repository.name }}" | tr '[:upper:]' '[:lower:]')
          PROJECT=$(basename "$PWD")          # ld-platform
          for svc in auth user diagnostics; do
            LOCAL="${PROJECT}-${svc}:latest"
            REMOTE="${{ env.REGISTRY }}/${OWNER_LOWER}/${REPO_LOWER}-${svc}:latest"
            docker tag "$LOCAL" "$REMOTE"
            docker push "$REMOTE"
          done

# ────────── TEST ────────────────────────────────────────────────────────────────
  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Build images for test (cache hits)
        run: docker compose build auth user diagnostics

      - name: Start services
        run: docker compose up -d auth user diagnostics

      - name: Health-checks
        run: |
          curl --retry 10 --retry-connrefused http://localhost:4000/health
          curl --retry 10 --retry-connrefused http://localhost:4001/health
          curl --retry 10 --retry-connrefused http://localhost:4002/health

      - name: Teardown
        if: always()
        run: docker compose down

# ────────── NOTIFY (Slack – опционально) ────────────────────────────────────────
  notify:
    if: always()
    needs: [ build, test ]
    runs-on: ubuntu-latest
    steps:
      - name: Send Slack message
        if: ${{ env.SLACK_WEBHOOK_URL != '' }}
        env:
          WEBHOOK: ${{ env.SLACK_WEBHOOK_URL }}
        run: |
          STATUS="✅ SUCCESS"
          if [ "${{ needs.test.result }}" != "success" ]; then STATUS="❌ FAILURE"; fi
          MSG="CI/CD pipeline *${STATUS}* for *${{ github.repository }}* (<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|details>)"
          curl -X POST -H 'Content-Type: application/json' --data "{\"text\":\"$MSG\"}" "$WEBHOOK"

# ────────── DEPLOY (заглушка) ───────────────────────────────────────────────────
  deploy:
    if: github.event_name == 'push'
    needs: [ build, test ]
    runs-on: ubuntu-latest
    steps:
      - run: echo "Deploy step — настроим позже"
