name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# ── Глобальные переменные ───────────────────────────────────────────────────────
env:
  REGISTRY: ghcr.io
  OWNER: ${{ github.repository_owner }}          # в build-шаге приведём к lower-case
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

# ── 1. BUILD ────────────────────────────────────────────────────────────────────
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - uses: docker/setup-buildx-action@v3

      - name: Login to GHCR (GITHUB_TOKEN уже с правами)
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compose build всех сервисов
        run: docker compose build --parallel

      - name: Retag и push в GHCR
        run: |
          OWNER_LOWER=$(echo "${{ env.OWNER }}" | tr '[:upper:]' '[:lower:]')
          REPO_LOWER=$(echo "${{ github.event.repository.name }}" | tr '[:upper:]' '[:lower:]')
          PROJECT=$(basename "$PWD")   # = ld-platform

          for svc in auth user diagnostics; do
            LOCAL_TAG="${PROJECT}-${svc}:latest"                     # ld-platform-auth:latest
            REMOTE_TAG="${{ env.REGISTRY }}/${OWNER_LOWER}/${REPO_LOWER}-${svc}:latest"

            echo "➜  push  $REMOTE_TAG"
            docker tag "$LOCAL_TAG" "$REMOTE_TAG"
            docker push "$REMOTE_TAG"
          done

# ── 2. TEST ─────────────────────────────────────────────────────────────────────
  test:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      # ☆ используем тот же Docker-демон раннера, DIND не нужен
      - name: Пересобрать (использует кеш) и запустить
        run: |
          docker compose build auth user diagnostics
          docker compose up -d auth user diagnostics

      - name: Ожидаем готовность сервисов и проверяем /health
        run: |
          ports=(4000 4001 4002)
          for p in "${ports[@]}"; do
            echo "⏳ ждём сервис на порту $p"
            for i in {1..30}; do
              if curl -fs http://localhost:$p/health >/dev/null 2>&1; then
                echo "✅ порт $p ответил"
                break
              fi
              sleep 2
              if [[ $i -eq 30 ]]; then
                echo "❌ порт $p не ответил за 60 сек."
                exit 1
              fi
            done
          done
          echo "🎉  все сервисы прошли health-check"

      - name: Teardown
        if: always()
        run: docker compose down --remove-orphans

# ── 3. NOTIFY (опционально Slack) ───────────────────────────────────────────────
  notify:
    if: always()
    needs: [ build, test ]
    runs-on: ubuntu-latest
    steps:
      - name: Slack уведомление
        if: ${{ env.SLACK_WEBHOOK_URL != '' }}
        env:
          WEBHOOK: ${{ env.SLACK_WEBHOOK_URL }}
        run: |
          STATUS="✅ SUCCESS"
          if [ "${{ needs.test.result }}" != "success" ]; then STATUS="❌ FAILURE"; fi
          TEXT="CI/CD pipeline *${STATUS}* for *${{ github.repository }}* (<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|детали>)"
          curl -sX POST -H 'Content-Type: application/json' --data "{\"text\":\"$TEXT\"}" "$WEBHOOK"

# ── 4. DEPLOY (заглушка) ────────────────────────────────────────────────────────
  deploy:
    if: github.event_name == 'push'
    needs: [ build, test ]
    runs-on: ubuntu-latest
    steps:
      - run: echo "Deploy настроим позже"
